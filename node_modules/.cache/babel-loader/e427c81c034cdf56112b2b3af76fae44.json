{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isHtml = exports.cloneDom = exports.domEach = exports.cssCase = exports.camelCase = exports.isCheerio = exports.isTag = void 0;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - The DOM node to check.\n * @returns Whether the node is a tag.\n */\nvar domhandler_2 = require(\"domhandler\");\nObject.defineProperty(exports, \"isTag\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_2.isTag;\n  }\n});\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\nfunction isCheerio(maybeCheerio) {\n  return maybeCheerio.cheerio != null;\n}\nexports.isCheerio = isCheerio;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in camel case notation.\n */\nfunction camelCase(str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n}\nexports.camelCase = camelCase;\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in \"CSS case\".\n */\nfunction cssCase(str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\nexports.cssCase = cssCase;\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - The array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\nfunction domEach(array, fn) {\n  var len = array.length;\n  for (var i = 0; i < len; i++) fn(array[i], i);\n  return array;\n}\nexports.domEach = domEach;\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The domhandler-compliant DOM structure.\n * @returns - The cloned DOM.\n */\nfunction cloneDom(dom) {\n  var clone = 'length' in dom ? Array.prototype.map.call(dom, function (el) {\n    return (0, domhandler_1.cloneNode)(el, true);\n  }) : [(0, domhandler_1.cloneNode)(dom, true)];\n  // Add a root node around the cloned nodes\n  var root = new domhandler_1.Document(clone);\n  clone.forEach(function (node) {\n    node.parent = root;\n  });\n  return clone;\n}\nexports.cloneDom = cloneDom;\nvar CharacterCodes;\n(function (CharacterCodes) {\n  CharacterCodes[CharacterCodes[\"LowerA\"] = 97] = \"LowerA\";\n  CharacterCodes[CharacterCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n  CharacterCodes[CharacterCodes[\"UpperA\"] = 65] = \"UpperA\";\n  CharacterCodes[CharacterCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n  CharacterCodes[CharacterCodes[\"Exclamation\"] = 33] = \"Exclamation\";\n})(CharacterCodes || (CharacterCodes = {}));\n/**\n * Check if string is HTML.\n *\n * Tests for a `<` within a string, immediate followed by a letter and\n * eventually followed by a `>`.\n *\n * @private\n * @category Utils\n * @param str - The string to check.\n * @returns Indicates if `str` is HTML.\n */\nfunction isHtml(str) {\n  var tagStart = str.indexOf('<');\n  if (tagStart < 0 || tagStart > str.length - 3) return false;\n  var tagChar = str.charCodeAt(tagStart + 1);\n  return (tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ || tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ || tagChar === CharacterCodes.Exclamation) && str.includes('>', tagStart + 2);\n}\nexports.isHtml = isHtml;","map":{"version":3,"sources":["utils.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isHtml = exports.cloneDom = exports.domEach = exports.cssCase = exports.camelCase = exports.isCheerio = exports.isTag = void 0;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - The DOM node to check.\n * @returns Whether the node is a tag.\n */\nvar domhandler_2 = require(\"domhandler\");\nObject.defineProperty(exports, \"isTag\", { enumerable: true, get: function () { return domhandler_2.isTag; } });\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\nfunction isCheerio(maybeCheerio) {\n    return maybeCheerio.cheerio != null;\n}\nexports.isCheerio = isCheerio;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in camel case notation.\n */\nfunction camelCase(str) {\n    return str.replace(/[_.-](\\w|$)/g, function (_, x) { return x.toUpperCase(); });\n}\nexports.camelCase = camelCase;\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in \"CSS case\".\n */\nfunction cssCase(str) {\n    return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\nexports.cssCase = cssCase;\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - The array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\nfunction domEach(array, fn) {\n    var len = array.length;\n    for (var i = 0; i < len; i++)\n        fn(array[i], i);\n    return array;\n}\nexports.domEach = domEach;\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The domhandler-compliant DOM structure.\n * @returns - The cloned DOM.\n */\nfunction cloneDom(dom) {\n    var clone = 'length' in dom\n        ? Array.prototype.map.call(dom, function (el) { return (0, domhandler_1.cloneNode)(el, true); })\n        : [(0, domhandler_1.cloneNode)(dom, true)];\n    // Add a root node around the cloned nodes\n    var root = new domhandler_1.Document(clone);\n    clone.forEach(function (node) {\n        node.parent = root;\n    });\n    return clone;\n}\nexports.cloneDom = cloneDom;\nvar CharacterCodes;\n(function (CharacterCodes) {\n    CharacterCodes[CharacterCodes[\"LowerA\"] = 97] = \"LowerA\";\n    CharacterCodes[CharacterCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n    CharacterCodes[CharacterCodes[\"UpperA\"] = 65] = \"UpperA\";\n    CharacterCodes[CharacterCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n    CharacterCodes[CharacterCodes[\"Exclamation\"] = 33] = \"Exclamation\";\n})(CharacterCodes || (CharacterCodes = {}));\n/**\n * Check if string is HTML.\n *\n * Tests for a `<` within a string, immediate followed by a letter and\n * eventually followed by a `>`.\n *\n * @private\n * @category Utils\n * @param str - The string to check.\n * @returns Indicates if `str` is HTML.\n */\nfunction isHtml(str) {\n    var tagStart = str.indexOf('<');\n    if (tagStart < 0 || tagStart > str.length - 3)\n        return false;\n    var tagChar = str.charCodeAt(tagStart + 1);\n    return (((tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ) ||\n        (tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ) ||\n        tagChar === CharacterCodes.Exclamation) &&\n        str.includes('>', tagStart + 2));\n}\nexports.isHtml = isHtml;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}